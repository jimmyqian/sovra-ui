import { describe, it, expect } from 'vitest'
import type { SearchResult, FilterItem } from '@/types/search'
import {
  validateSearchQuery,
  normalizeSearchQuery,
  formatQueryForUrl,
  decodeQueryFromUrl,
  filterSearchResults,
  sortResultsByRating,
  sortResultsByName,
  sortResultsByAge,
  calculateAverageRating,
  groupResultsByLocation,
  createFilterFromQuery,
  removeFilter,
  isFilterRemovable,
  getFilterDisplayText,
  validateSearchResult,
  sanitizeSearchResults,
  generateResultsSummary
} from '@/utils/search'

describe('Search Utilities', () => {
  const mockResults: SearchResult[] = [
    {
      id: 1,
      name: 'John Doe',
      age: 30,
      gender: 'Male',
      maritalStatus: 'Single',
      location: 'California',
      rating: 4.5,
      references: 25,
      companies: 5,
      contacts: 10
    },
    {
      id: 2,
      name: 'Jane Smith',
      age: 25,
      gender: 'Female',
      maritalStatus: 'Married',
      location: 'New York',
      rating: 3.8,
      references: 20,
      companies: 3,
      contacts: 8
    },
    {
      id: 3,
      name: 'Alice Johnson',
      age: 35,
      gender: 'Female',
      maritalStatus: 'Single',
      location: 'California',
      rating: 4.2,
      references: 30,
      companies: 7,
      contacts: 15
    }
  ]

  describe('validateSearchQuery', () => {
    it('returns true for valid non-empty strings', () => {
      expect(validateSearchQuery('john doe')).toBe(true)
      expect(validateSearchQuery('software engineer')).toBe(true)
      expect(validateSearchQuery('a')).toBe(true)
    })

    it('returns false for empty or whitespace-only strings', () => {
      expect(validateSearchQuery('')).toBe(false)
      expect(validateSearchQuery('   ')).toBe(false)
      expect(validateSearchQuery('\t\n')).toBe(false)
    })

    it('returns false for non-string values', () => {
      expect(validateSearchQuery(null as unknown as string)).toBe(false)
      expect(validateSearchQuery(undefined as unknown as string)).toBe(false)
      expect(validateSearchQuery(123 as unknown as string)).toBe(false)
    })
  })

  describe('normalizeSearchQuery', () => {
    it('trims whitespace and removes extra spaces', () => {
      expect(normalizeSearchQuery('  john   doe  ')).toBe('john doe')
      expect(normalizeSearchQuery('software\t\tengineer')).toBe(
        'software engineer'
      )
      expect(normalizeSearchQuery('\n\ntest\n\n')).toBe('test')
    })

    it('handles single words', () => {
      expect(normalizeSearchQuery('  test  ')).toBe('test')
    })

    it('handles empty strings', () => {
      expect(normalizeSearchQuery('   ')).toBe('')
    })
  })

  describe('formatQueryForUrl', () => {
    it('encodes special characters', () => {
      expect(formatQueryForUrl('john doe')).toBe('john%20doe')
      expect(formatQueryForUrl("O'Connor & Associates")).toBe(
        "O'Connor%20%26%20Associates"
      )
    })

    it('normalizes before encoding', () => {
      expect(formatQueryForUrl('  john   doe  ')).toBe('john%20doe')
    })
  })

  describe('decodeQueryFromUrl', () => {
    it('decodes URL-encoded strings', () => {
      expect(decodeQueryFromUrl('john%20doe')).toBe('john doe')
      expect(decodeQueryFromUrl('O%27Connor%20%26%20Associates')).toBe(
        "O'Connor & Associates"
      )
    })

    it('returns original string if decoding fails', () => {
      expect(decodeQueryFromUrl('invalid%')).toBe('invalid%')
    })
  })

  describe('filterSearchResults', () => {
    it('filters results by name', () => {
      const filtered = filterSearchResults(mockResults, 'john')
      expect(filtered).toHaveLength(2) // John Doe and Alice Johnson
      expect(filtered.map(r => r.name)).toContain('John Doe')
      expect(filtered.map(r => r.name)).toContain('Alice Johnson')
    })

    it('filters results by location', () => {
      const filtered = filterSearchResults(mockResults, 'california')
      expect(filtered).toHaveLength(2)
      expect(filtered.every(r => r.location === 'California')).toBe(true)
    })

    it('returns all results for invalid query', () => {
      const filtered = filterSearchResults(mockResults, '')
      expect(filtered).toEqual(mockResults)
    })

    it('is case-insensitive', () => {
      const filtered = filterSearchResults(mockResults, 'JOHN')
      expect(filtered).toHaveLength(2)
    })
  })

  describe('sortResultsByRating', () => {
    it('sorts results by rating in descending order', () => {
      const sorted = sortResultsByRating(mockResults)
      expect(sorted[0]!.rating).toBe(4.5)
      expect(sorted[1]!.rating).toBe(4.2)
      expect(sorted[2]!.rating).toBe(3.8)
    })

    it('does not mutate original array', () => {
      const original = [...mockResults]
      sortResultsByRating(mockResults)
      expect(mockResults).toEqual(original)
    })
  })

  describe('sortResultsByName', () => {
    it('sorts results alphabetically by name', () => {
      const sorted = sortResultsByName(mockResults)
      expect(sorted[0]!.name).toBe('Alice Johnson')
      expect(sorted[1]!.name).toBe('Jane Smith')
      expect(sorted[2]!.name).toBe('John Doe')
    })
  })

  describe('sortResultsByAge', () => {
    it('sorts results by age ascending by default', () => {
      const sorted = sortResultsByAge(mockResults)
      expect(sorted[0]!.age).toBe(25)
      expect(sorted[1]!.age).toBe(30)
      expect(sorted[2]!.age).toBe(35)
    })

    it('sorts results by age descending when specified', () => {
      const sorted = sortResultsByAge(mockResults, false)
      expect(sorted[0]!.age).toBe(35)
      expect(sorted[1]!.age).toBe(30)
      expect(sorted[2]!.age).toBe(25)
    })
  })

  describe('calculateAverageRating', () => {
    it('calculates average rating correctly', () => {
      const average = calculateAverageRating(mockResults)
      expect(average).toBe(4.17) // (4.5 + 3.8 + 4.2) / 3 = 4.17
    })

    it('returns 0 for empty array', () => {
      expect(calculateAverageRating([])).toBe(0)
    })

    it('rounds to 2 decimal places', () => {
      const results = [
        { ...mockResults[0]!, rating: 3.333 },
        { ...mockResults[1]!, rating: 3.333 },
        { ...mockResults[2]!, rating: 3.333 }
      ]
      expect(calculateAverageRating(results)).toBe(3.33)
    })
  })

  describe('groupResultsByLocation', () => {
    it('groups results by location', () => {
      const grouped = groupResultsByLocation(mockResults)
      expect(grouped['California']).toHaveLength(2)
      expect(grouped['New York']).toHaveLength(1)
    })

    it('handles empty array', () => {
      expect(groupResultsByLocation([])).toEqual({})
    })
  })

  describe('createFilterFromQuery', () => {
    it('creates filter with normalized query', () => {
      const filter = createFilterFromQuery('  john   doe  ')
      expect(filter.text).toBe('john doe')
      expect(filter.removable).toBe(true)
      expect(typeof filter.id).toBe('string')
    })
  })

  describe('removeFilter', () => {
    const filters: FilterItem[] = [
      { id: '1', text: 'Filter 1' },
      { id: '2', text: 'Filter 2' },
      { id: '3', text: 'Filter 3' }
    ]

    it('removes filter by ID', () => {
      const updated = removeFilter(filters, '2')
      expect(updated).toHaveLength(2)
      expect(updated.find(f => f.id === '2')).toBeUndefined()
    })

    it('returns same array if ID not found', () => {
      const updated = removeFilter(filters, 'nonexistent')
      expect(updated).toHaveLength(3)
    })
  })

  describe('isFilterRemovable', () => {
    it('returns true for removable filters', () => {
      const filter: FilterItem = { id: '1', text: 'Test', removable: true }
      expect(isFilterRemovable(filter)).toBe(true)
    })

    it('returns false for non-removable filters', () => {
      const filter: FilterItem = { id: '1', text: 'Test', removable: false }
      expect(isFilterRemovable(filter)).toBe(false)
    })

    it('returns false when removable is undefined', () => {
      const filter: FilterItem = { id: '1', text: 'Test' }
      expect(isFilterRemovable(filter)).toBe(false)
    })
  })

  describe('getFilterDisplayText', () => {
    it('returns dropdown text when available', () => {
      const filter: FilterItem = {
        id: '1',
        text: 'Filter',
        dropdownText: 'Dropdown Text'
      }
      expect(getFilterDisplayText(filter)).toBe('Dropdown Text')
    })

    it('returns regular text when dropdown text not available', () => {
      const filter: FilterItem = { id: '1', text: 'Filter Text' }
      expect(getFilterDisplayText(filter)).toBe('Filter Text')
    })
  })

  describe('validateSearchResult', () => {
    it('returns true for valid search result', () => {
      expect(validateSearchResult(mockResults[0])).toBe(true)
    })

    it('returns false for missing properties', () => {
      const invalid = { ...mockResults[0] }
      delete (invalid as Record<string, unknown>).name
      expect(validateSearchResult(invalid)).toBe(false)
    })

    it('returns false for wrong property types', () => {
      const invalid = { ...mockResults[0], age: 'thirty' }
      expect(validateSearchResult(invalid)).toBe(false)
    })

    it('returns false for null or non-object values', () => {
      expect(validateSearchResult(null)).toBe(false)
      expect(validateSearchResult('string')).toBe(false)
      expect(validateSearchResult(123)).toBe(false)
    })
  })

  describe('sanitizeSearchResults', () => {
    it('removes invalid results', () => {
      const mixed = [
        mockResults[0],
        { invalid: 'data' },
        mockResults[1],
        null,
        mockResults[2]
      ]
      const sanitized = sanitizeSearchResults(mixed)
      expect(sanitized).toHaveLength(3)
      expect(sanitized).toEqual(mockResults)
    })

    it('returns empty array for all invalid results', () => {
      const invalid = [null, 'string', 123, {}]
      expect(sanitizeSearchResults(invalid)).toEqual([])
    })
  })

  describe('generateResultsSummary', () => {
    it('generates correct summary for valid results', () => {
      const summary = generateResultsSummary(mockResults)
      expect(summary.total).toBe(3)
      expect(summary.averageAge).toBe(30) // (30 + 25 + 35) / 3 = 30
      expect(summary.averageRating).toBe(4.17)
      expect(summary.topLocations).toEqual(['California', 'New York'])
    })

    it('handles empty results array', () => {
      const summary = generateResultsSummary([])
      expect(summary.total).toBe(0)
      expect(summary.averageAge).toBe(0)
      expect(summary.averageRating).toBe(0)
      expect(summary.topLocations).toEqual([])
    })

    it('limits top locations to 3', () => {
      const manyLocations = [
        { ...mockResults[0]!, location: 'Location A' },
        { ...mockResults[1]!, location: 'Location B' },
        { ...mockResults[2]!, location: 'Location C' },
        { ...mockResults[0]!, location: 'Location D' },
        { ...mockResults[1]!, location: 'Location E' }
      ]
      const summary = generateResultsSummary(manyLocations)
      expect(summary.topLocations).toHaveLength(3)
    })
  })
})
